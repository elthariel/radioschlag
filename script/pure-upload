#! /home/radio-schlag/new_radio/script/runner -eproduction
## incomingd.rb
## Login : <opp2@opp2-devsrv>
## Started on  Thu Dec  3 14:26:37 2009 opp2
## $Id$
##
## Author(s):
##  - opp2 <>
##
## Copyright (C) 2009 opp2
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
##

if ARGV.length != 1
  p "Script called with wrong arguments"
  exit(0)
end

path = File.expand_path(ARGV[0])

# Discard if the script is not a file
if !File.readable?(path)
  p "#{path} is either not a file or not readble"
  exit(0)
end

ftp_path = RADIO_CONFIG[:ftp_root]
root_path = RADIO_CONFIG[:audio_root]

if path[0, ftp_path.length] == ftp_path

  # Audio Files defaults to undefined type and nostyle
  type_id = AudioFileType.find_by_name('undefined').id
  style_id = AudioFileStyle.find_by_name('nostyle').id

  # Determining the owner of the file
  relative_path = path[ftp_path.length + 1, path.length]
  infos = relative_path.split('/')
  user_id = User.find_by_name(infos[0]).id

elsif path[0, root_path.length] == root_path

  # Use hierarchy convention root/type/style to determine style
  relative_path = path[root_path.length + 1, path.length]
  infos = relative_path.split('/')
  user_id = User.find_by_username(RADIO_CONFIG[:root]).id
  type_id = AudioFileType.find_by_name(infos[0]).id

  # Checking if the style exists, if not creating it.
  AudioFileStyle.create(:name => infos[1], :metric => 1.0) unless AudioFileStyle.exists?(:name => infos[1])
  style_id = AudioFileStyle.find_by_name(infos[1]).id

else
  # Not a radio upload
  exit(0)
end

p "Creating incoming audio file #{type_id}:#{style_id}:#{user_id}"
IncomingAudioFile.create(:path => path, :user_id => user_id,
                         :audio_file_type_id => type_id,
                         :audio_file_style_id => style_id)

